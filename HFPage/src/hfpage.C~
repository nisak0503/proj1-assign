#include <iostream>
#include <stdlib.h>
#include <memory.h>

#include "hfpage.h"
#include "heapfile.h"
#include "buf.h"
#include "db.h"


// **********************************************************
// page class constructor

void HFPage::init(PageId pageNo)
{
  // fill in the body
	//setting data members to reasonable default
	nextPage = INVALID_PAGE;
	prevPage = INVALID_PAGE;
	slotCnt = 0;
	curPage = pageNo; 
	usedPtr = -1; //usedPtr is the offset of first used byte in data[]
	freeSpace = MAX_SPACE - DPFIXED; // number of bytes free in data[] 
	
}

// **********************************************************
// dump page utlity
void HFPage::dumpPage()
{
    int i;

    cout << "dumpPage, this: " << this << endl;
    cout << "curPage= " << curPage << ", nextPage=" << nextPage << endl;
    cout << "usedPtr=" << usedPtr << ",  freeSpace=" << freeSpace
         << ", slotCnt=" << slotCnt << endl;
   
    for (i=0; i < slotCnt; i++) {
        cout << "slot["<< i <<"].offset=" << slot[i].offset
             << ", slot["<< i << "].length=" << slot[i].length << endl;
    }
}

// **********************************************************
PageId HFPage::getPrevPage()
{
    // fill in the body
	if (prevPage != INVALID_PAGE)
		return prevPage;
	else
    	return 0;
}

// **********************************************************
void HFPage::setPrevPage(PageId pageNo)
{
    // fill in the body
	prevPage = pageNo;
}

// **********************************************************
void HFPage::setNextPage(PageId pageNo)
{
  // fill in the body
	nextPage = pageNo;
}

// **********************************************************
PageId HFPage::getNextPage()
{
    // fill in the body
	if (nextPage != INVALID_PAGE)	
		return nextPage;
	else
    	return 0;
}

// freeSpace >= recLen

short hasPreEmptySlot()
{
	for (short s = 0; s < slotCnt; ++s)
		if(slot[s].length == EMPTY_SLOT)
		{
			return s;
		}
	return -2;
}

short hasSpace(int recLen)
{
	short slotId = -1;
	if (freeSpace < recLen) return slotId;	
// has room for record itself in data area
	//1) there happens to be a pre-allocated slot that's empty
	slotId = hasPreEmptySlot();
	if (slotId >= 0) return slotId;
	//2) also room for a new slot in the data area
	else if ((slotId == -2) && (freeSpace >= recLen + sizeof(slot_t))) 
	{
		slotId = slotCnt;
		slotCnt++;
		// freeSpace initially = MAX_SPACE - DPFIXED, which has already cal the first slot
		if (slotCnt > 1)
 			freeSpace -= sizeof(slot_t);
		return slotId;  //recLen & freeSpace danwei??????????????????????  
	}
	else 
	{
		cerr << "hasSpace Error! by kasin"<<endl;
		while(true);
		return -100;
	}
}
// **********************************************************
// Add a new record to the page. Returns OK if everything went OK
// otherwise, returns DONE if sufficient space does not exist
// RID of the new record is returned via rid parameter.
Status HFPage::insertRecord(char* recPtr, int recLen, RID& rid)
{
    // fill in the body
	// when we judge we have space for the record
	// char pointer points to the record with recLen 
	// data has space, slot directory has space
	short slotId = hasSpace(recLen);
	if(slotId == -1) return DONE;
	//slot
	//already coped with freeSpace update
	slot[slotId].offset = data + usedPtr - recLen;
	slot[slotId].length = recLen;
	usedPtr -= recLen;
	//data
	memcpy(slot[slotId].offset, recPtr, slot[slotId].length);
	freeSpace -= recLen;
	//rid
	rid.pageNo = curPage;
	rid.slotNo = slotId;	
    return OK;
}

// **********************************************************
// Delete a record from a page. Returns OK if everything went okay.
// Compacts remaining records but leaves a hole in the slot array.
// Use memmove() rather than memcpy() as space may overlap.
jStatus HFPage::deleteRecord(const RID& rid)
{
    // fill in the body
	if(rid.pageNo != curPage) return FAIL;
	short slotId = rid.slotNo;
	short curOffset = slot[slotId].offset;
	short curLength = slot[slotId].length;
	//              XXXXXXXXXXX   YYYYYYYYYYYYYYY
    //              |
	//              |  XXXXXXXXXXXYYYYYYYYYYYYYYY            
	//     data+usedPtr|
	//                 |
	//			data+usedPtr+length
	
	memmove(data+usedPtr+curLenth, data+usedPtr, curLength);
	for(int s = 0; s < slotCnt; ++s)
	{
		if(slot[s].offset < curOffset)
			slot[s].offset += curLength;
	}
	usedPtr += curLength;
	slot[slotId].length = EMPTY_SLOT;
    return OK;
}

// **********************************************************
// returns RID of first record on page
Status HFPage::firstRecord(RID& firstRid)
{
    // fill in the body
	short slotId = -1;
	short aimOffset = data + usedPtr;
	for (short s = 0; s < slotCnt; ++s)
		if(slot[s].offset == aimOffset)
		{
			slotId = s;
			break;
		}
	if (slotId == -1) 
	{
		cerr << "there is no first Record! by kasin"<<endl;
	//	while(true);
		return DONE;
	}
	firstRid.pageNo = curPage;
	firstRid.slotNo = slotId;
    return OK;
}

// **********************************************************
// returns RID of next record on the page
// returns DONE if no more records exist on the page; otherwise OK
Status HFPage::nextRecord (RID curRid, RID& nextRid)
{
    // fill in the body
	PageID nextPageNo = curRid.pageNo;
	//cal slotNo
	short nowSlotId = curRid.slotNo;
	if(nowSlotId >= slotCnt) return FAIL;
	short nextOffset = slot[nowSlotId].offset + slot[nowSlotId].length;
	for(short s = 0; s < slotCnt; ++s)
	{
		if(slot[s].offset == nextOffset)
		{
			nextRid.pageNo = nextPageNo;
			nextRid.slotNo = s;
			return OK;
		}
	}
	return DONE;
    return OK;
}

// **********************************************************
// returns length and copies out record with RID rid
Status HFPage::getRecord(RID rid, char* recPtr, int& recLen)
{
    // fill in the body
	if(rid.pageNo != curPage) return FAIL;
	short slotId = rid.slotNo;
	if(slotId >= slotCnt) return FAIL;
	recLen = slot[slotId].length;
	memcpy(slot[slotId].offset, recPtr, slot[slotId].length);
    return OK;
}

// **********************************************************
// returns length and pointer to record with RID rid.  The difference
// between this and getRecord is that getRecord copies out the record
// into recPtr, while this function returns a pointer to the record
// in recPtr.
Status HFPage::returnRecord(RID rid, char*& recPtr, int& recLen)
{
    // fill in the body
	if(rid.pageNo != curPage) return FAIL;
	short slotId = rid.slotNo;
	if(slotId >= slotCnt) return FAIL;
	recLen = slot[slotId].length;
	// you set the caller's recPtr to point directly to the record on the page.
	recPtr = slot[slotId].offset;
    return OK;
}

// **********************************************************
// Returns the amount of available space on the heap file page
int HFPage::available_space(void)
{
    // fill in the body
	//since freeSpace does not count slot[0]
	short slotId = hasPreEmptySlot();
	int remainByte = 0;
	//there is a pre-allocated empty slot that can be used
	//since slot[0] cannot contain data, dont have to freeSpace + sizeof(slot_t) even if slot[0].length == EMPTY_SLOT  
	if(slotId != -2) 
		return freeSpace; 
	else //have to new a slot
		return freeSpace - sizeof(slot_t);
    return 0;
}

// **********************************************************
// Returns 1 if the HFPage is empty, and 0 otherwise.
// It scans the slot directory looking for a non-empty slot.
bool HFPage::empty(void)
{
    // fill in the body
	for(short s = 0; s < slotCnt; ++s)
	{
		if(slot[s].length != EMPTY_SLOT) return false;
	}
    return true;
}



